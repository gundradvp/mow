import React, { useState, useEffect, lazy, Suspense } from "react";
import {
  Box,
  Container,
  Typography,
  Grid,
  Paper,
  Card,
  CardContent,
  CardActions,
  Button,
  AppBar,
  Toolbar,
  Badge,
  IconButton,
  Avatar,
  Chip,
  CircularProgress,
  Alert,
  useMediaQuery,
  Divider,
  BottomNavigation,
  BottomNavigationAction,
  Fade,
} from "@mui/material";
import { useTheme } from "@mui/material/styles";
import {
  CalendarToday as CalendarIcon,
  Schedule as ScheduleIcon,
  Notifications as NotificationsIcon,
  AccountCircle as AccountCircleIcon,
  Map as MapIcon,
  Restaurant as FoodIcon,
  Home as HomeIcon,
  Place as PlaceIcon,
} from "@mui/icons-material";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../contexts/AuthContext";
import MobileViewportMeta from "../../components/MobileViewportMeta";
import PullToRefresh from "../../components/PullToRefresh";
import useSwipeGesture from "../../hooks/useSwipeGesture";

const VolunteerDashboard = () => {
  const { currentUser } = useAuth();
  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("sm"));
  const [navValue, setNavValue] = useState(0);

  const [volunteerData, setVolunteerData] = useState(null);
  const [upcomingDeliveries, setUpcomingDeliveries] = useState([]);
  const [pastDeliveries, setPastDeliveries] = useState([]);
  const [notifications, setNotifications] = useState([]);  const [loading, setLoading] = useState(true);
  const [actionLoading, setActionLoading] = useState({});
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchVolunteerData = async () => {
      try {
        setLoading(true);

        // In a real application, you'd fetch this from your API based on currentUser.id
        // For now, we'll use mock data
        setTimeout(() => {
          // Mock volunteer data
          const mockVolunteer = {
            id: currentUser?.id || "v-123",
            firstName: currentUser?.firstName || "John",
            lastName: currentUser?.lastName || "Doe",
            email: currentUser?.email || "volunteer@example.com",
            phoneNumber: "555-123-4567",
            address: "123 Main Street",
            city: "Springfield",
            state: "IL",
            zipCode: "62701",
            availability: "Weekdays, Mornings",
            completedDeliveries: 6,
            assignedDeliveries: 10,
            joinedSince: "January 15, 2023",
            profileImage: `https://i.pravatar.cc/300?u=${
              currentUser?.id || "v-123"
            }`,
          };

          // Enhanced mock upcoming deliveries with more details for mobile view
          const mockUpcoming = [
            {
              id: "ST7890QR12",
              date: "2025-05-10",
              time: "9:00 AM - 11:00 AM",
              route: "North Springfield",
              recipientName: "Aman Sharma",
              address: "201/D, Ananta Apts, Near Jal Bhawan, Andheri 400069",
              distance: "5 km",
              clients: 1,
              status: "Yet to Start",
              items: [
                { name: "Caramel Macchiato", quantity: 1 },
                { name: "Egg Mayo Breakfast Sandwich", quantity: 2 },
              ],
            },
            {
              id: "ST7890QR13",
              date: "2025-05-10",
              time: "11:30 AM - 1:30 PM",
              route: "East Springfield",
              recipientName: "Sarah Johnson",
              address: "42 Oak Street, Apartment 7B, Springfield, IL 62704",
              distance: "3.2 km",
              clients: 1,
              status: "Yet to Start",
              items: [
                { name: "Vegetable Soup", quantity: 1 },
                { name: "Grilled Chicken Sandwich", quantity: 1 },
                { name: "Fresh Fruit Cup", quantity: 1 },
              ],
            },
            {
              id: "ST7890QR14",
              date: "2025-05-11",
              time: "10:00 AM - 12:00 PM",
              route: "West Springfield",
              recipientName: "Robert Miller",
              address: "157 Pine Avenue, Springfield, IL 62701",
              distance: "4.5 km",
              clients: 1,
              status: "Pending Confirmation",
              items: [
                { name: "Turkey & Swiss Sandwich", quantity: 1 },
                { name: "Garden Salad", quantity: 1 },
                { name: "Apple Juice", quantity: 1 },
              ],
            },
          ];

          // Mock past deliveries
          const mockPast = [
            {
              id: 101,
              date: "2025-05-07",
              route: "South Springfield",
              clients: 2,
              status: "Completed",
            },
            {
              id: 102,
              date: "2025-05-05",
              route: "West Springfield",
              clients: 4,
              status: "Completed",
            },
          ];

          // Mock notifications
          const mockNotifications = [
            {
              id: 201,
              type: "schedule_confirmation",
              message: "Please confirm your delivery for May 11, 2025",
              date: "2025-05-08",
              isRead: false,
            },
            {
              id: 202,
              type: "route_change",
              message: "Route change for your May 10 delivery - see details",
              date: "2025-05-07",
              isRead: true,
            },
          ];

          setVolunteerData(mockVolunteer);
          setUpcomingDeliveries(mockUpcoming);
          setPastDeliveries(mockPast);
          setNotifications(mockNotifications);
          setLoading(false);
        }, 1000);
      } catch (err) {
        console.error("Error fetching volunteer data:", err);
        setError(
          "Failed to load your volunteer information. Please try again later."
        );
        setLoading(false);
      }
    };

    fetchVolunteerData();
  }, [currentUser]);

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      weekday: "long",
      month: "short",
      day: "numeric",
    });
  };

  const getStatusChipColor = (status) => {
    switch (status.toLowerCase()) {
      case "confirmed":
        return "success";
      case "yet to start":
        return "warning";
      case "pending confirmation":
        return "warning";
      case "completed":
        return "primary";
      default:
        return "default";
    }
  };

  // Helper function to check if a delivery is eligible for route mapping
  const canGenerateRouteMap = (status) => {
    return status.toLowerCase() !== "completed";
  };
  const handleConfirmDelivery = (deliveryId) => {
    // Set loading state for this specific delivery
    setActionLoading(prev => ({ ...prev, [deliveryId]: true }));
    
    // In a real app, you'd call an API to confirm the delivery
    console.log(`Confirming delivery ${deliveryId}`);

    // Simulate API call with timeout
    setTimeout(() => {
      // Update the local state
      setUpcomingDeliveries(
        upcomingDeliveries.map((delivery) =>
          delivery.id === deliveryId
            ? { ...delivery, status: "Confirmed" }
            : delivery
        )
      );
      
      // Clear loading state
      setActionLoading(prev => ({ ...prev, [deliveryId]: false }));
    }, 800); // Simulate network delay
  };
  const handleViewDetails = (deliveryId) => {
    // Navigate to delivery details page
    navigate(`/volunteer-delivery/${deliveryId}`);
  };
  
  // Handle card swipe actions for mobile users
  const handleCardSwipe = (deliveryId, direction) => {
    if (direction === 'left') {
      // Swipe left to navigate to route map
      navigate(`/route-map/${deliveryId}`);
    } else if (direction === 'right') {
      // Swipe right to view details
      handleViewDetails(deliveryId);
    }
  };

  // Helper function to check if any non-completed deliveries exist
  const hasActiveDeliveries = () => {
    return upcomingDeliveries.some(
      (delivery) => delivery.status.toLowerCase() !== "completed"
    );
  };

  const handleGenerateRouteMap = () => {
    // Navigate to route map with all active deliveries
    navigate(`/route-map/all`);
  };

  const handleViewAllSchedules = () => {
    navigate("/volunteer-schedules");
  };

  const handleViewAllNotifications = () => {
    navigate("/volunteer-notifications");
  };
  if (loading) {
    return (
      <Box
        sx={{
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          height: "80vh",
          px: 2
        }}
      >
        <CircularProgress size={isMobile ? 36 : 40} />
        <Typography 
          variant="body2" 
          color="text.secondary" 
          sx={{ mt: 2, textAlign: 'center' }}
        >
          {isMobile ? "Loading your deliveries..." : "Loading your volunteer dashboard..."}
        </Typography>
      </Box>
    );
  }

  if (error) {
    return (
      <Container maxWidth={isMobile ? "sm" : "md"} sx={{ mt: 4, px: isMobile ? 2 : 3 }}>
        <Alert 
          severity="error"
          sx={{
            borderRadius: isMobile ? 1 : 2,
            '& .MuiAlert-message': {
              fontSize: isMobile ? '0.875rem' : '1rem'
            }
          }}
        >
          {error}
        </Alert>
        <Box sx={{ mt: 2, textAlign: 'center' }}>
          <Button 
            variant="outlined" 
            onClick={() => window.location.reload()}
            size={isMobile ? "small" : "medium"}
          >
            Try Again
          </Button>
        </Box>
      </Container>
    );
  }

  const unreadNotificationsCount = notifications.filter(
    (n) => !n.isRead
  ).length;  const handleRefresh = async () => {
    setLoading(true);
    try {
      // In a real app, you'd refetch data from your API
      // For now, we'll simulate a refresh with the same mock data
      setTimeout(() => {
        setLoading(false);
      }, 1000);
    } catch (err) {
      console.error("Error refreshing data:", err);
      setError("Failed to refresh data. Please try again.");
      setLoading(false);
    }
  };

  return (
    <Box sx={{ pb: isMobile ? 8 : 4, position: 'relative' }}>
      {/* Add mobile viewport meta tags for better mobile compatibility */}
      {isMobile && <MobileViewportMeta />}
      
      {/* Add pull-to-refresh functionality for mobile users */}
      {isMobile && <PullToRefresh onRefresh={handleRefresh} />}
      
      {/* Mobile-friendly AppBar */}
      <AppBar position="static" color="primary" elevation={isMobile ? 1 : 0}>
        <Toolbar sx={{ p: isMobile ? 1 : 2, minHeight: isMobile ? 56 : 64 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', flexGrow: 1 }}>
            <Typography 
              variant={isMobile ? "subtitle1" : "h6"} 
              component="div" 
              sx={{ 
                flexGrow: 1,
                whiteSpace: 'nowrap',
                overflow: 'hidden',
                textOverflow: 'ellipsis'
              }}>
              Hello, {volunteerData.firstName}!
            </Typography>
          </Box>

          <IconButton
            color="inherit"
            onClick={handleViewAllNotifications}
            size={isMobile ? "small" : "medium"}
            sx={{ ml: 1 }}
          >
            <Badge badgeContent={unreadNotificationsCount} color="error">
              <NotificationsIcon fontSize={isMobile ? "small" : "medium"} />
            </Badge>
          </IconButton>          <IconButton
            color="inherit"
            edge="end"
            onClick={() => navigate(`/volunteer-profile/${volunteerData.id}`)}
            size={isMobile ? "small" : "medium"}
            sx={{ ml: 1 }}
          >
            <Avatar
              src={volunteerData.profileImage}
              sx={{ 
                width: isMobile ? 24 : 32, 
                height: isMobile ? 24 : 32,
                border: '2px solid white'
              }}
            />
          </IconButton>
        </Toolbar>
      </AppBar>

      <Container 
        maxWidth="lg" 
        disableGutters={isMobile} 
        sx={{ 
          mt: isMobile ? 1 : 2, 
          px: isMobile ? 2 : 2
        }}
      >
        <Typography
          variant={isMobile ? "h6" : "h5"}
          component="h1"
          sx={{ 
            mb: isMobile ? 1.5 : 2, 
            fontWeight: "bold",
            fontSize: isMobile ? "1.125rem" : "1.5rem"
          }}
        >
          Volunteer Dashboard
        </Typography>

        {/* Task Summary Cards */}
        <Grid
          container
          spacing={isMobile ? 2 : 2}
          sx={{ 
            mb: isMobile ? 2 : 3,
            mx: isMobile ? -0.5 : 0
          }}
        >
          <Grid item xs={6} sm={6}>
            <Paper
              sx={{
                p: isMobile ? 1.5 : 2,
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                bgcolor: "primary.light",
                color: "primary.contrastText",
                borderRadius: 2,
                height: '100%',
                justifyContent: 'center',
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
              }}
              elevation={isMobile ? 1 : 2}
            >
              <Typography
                variant={isMobile ? "h6" : "h4"}
                component="div"
                fontWeight="bold"
                sx={{ fontSize: isMobile ? "1.25rem" : "2rem" }}
              >
                {volunteerData.assignedDeliveries}
              </Typography>
              <Typography variant="body2" sx={{ mt: 0.5 }}>Assigned</Typography>
            </Paper>
          </Grid>

          <Grid item xs={6} sm={6}>
            <Paper
              sx={{
                p: isMobile ? 1.5 : 2,
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                bgcolor: "success.light",
                color: "success.contrastText",
                borderRadius: 2,
                height: '100%',
                justifyContent: 'center',
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
              }}
              elevation={isMobile ? 1 : 2}
            >
              <Typography
                variant={isMobile ? "h6" : "h4"}
                component="div"
                fontWeight="bold"
                sx={{ fontSize: isMobile ? "1.25rem" : "2rem" }}
              >
                {volunteerData.completedDeliveries}
              </Typography>
              <Typography variant="body2" sx={{ mt: 0.5 }}>Completed</Typography>
            </Paper>
          </Grid>
        </Grid>        {/* Delivery Cards - Main Focus for Mobile */}
        <Typography 
          variant="h6" 
          component="h2" 
          sx={{ 
            mb: isMobile ? 1 : 2,
            fontSize: isMobile ? "1rem" : "1.25rem",
            fontWeight: 600
          }}
        >
          Your Deliveries
        </Typography>        {upcomingDeliveries.length > 0 ? (
          <Box sx={{ mb: 4 }}>
            {upcomingDeliveries.map((delivery) => {
              // Set up swipe gestures for mobile users
              const { touchHandlers, swiping } = isMobile ? 
                useSwipeGesture({
                  threshold: 70,
                  onSwipeLeft: () => handleCardSwipe(delivery.id, 'left'),
                  onSwipeRight: () => handleCardSwipe(delivery.id, 'right'),
                }) : { touchHandlers: {}, swiping: false };
                
              return (<Card
                key={delivery.id}
                elevation={isMobile ? 1 : 2}
                sx={{
                  mb: 2,
                  borderRadius: isMobile ? 1 : 2,
                  boxShadow: "0 2px 8px rgba(0,0,0,0.08)",
                  overflow: 'hidden',
                  transition: 'transform 0.2s, box-shadow 0.2s',
                  WebkitTapHighlightColor: 'transparent',
                  '&:active': isMobile ? {
                    transform: 'scale(0.98)',
                    boxShadow: "0 1px 4px rgba(0,0,0,0.1)",
                  } : {}
                }}
              >
                {/* Status header */}
                <Box
                  sx={{
                    bgcolor: getStatusChipColor(delivery.status) + '.main',
                    color: getStatusChipColor(delivery.status) + '.contrastText',
                    py: 0.5,
                    px: 2,
                    textAlign: 'center',
                    position: 'relative'
                  }}
                >
                  <Typography variant="caption" fontWeight="medium">
                    {delivery.status}
                  </Typography>
                </Box>
                
                <CardContent 
                  sx={{ 
                    p: isMobile ? 1.5 : 2,
                    '&:last-child': { pb: isMobile ? 1.5 : 2 }
                  }}
                >
                  <Box
                    sx={{
                      display: "flex",
                      justifyContent: "space-between",
                      mb: 1,
                      alignItems: 'flex-start'
                    }}
                  >
                    <Box>
                      <Typography 
                        variant="subtitle1" 
                        fontWeight="medium"
                        sx={{ 
                          fontSize: isMobile ? '0.95rem' : '1rem',
                          lineHeight: 1.3
                        }}
                      >
                        {delivery.recipientName}
                      </Typography>
                      <Typography variant="caption" color="text.secondary">
                        Order ID: {delivery.id}
                      </Typography>
                    </Box>
                    
                    <Box
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        bgcolor: 'primary.50',
                        px: 1,
                        py: 0.5,
                        borderRadius: 1,
                        ml: 1
                      }}
                    >
                      <PlaceIcon
                        fontSize="small"
                        color="primary"
                        sx={{ mr: 0.5, fontSize: '0.85rem' }}
                      />
                      <Typography 
                        variant="caption"
                        fontWeight="medium"
                        color="primary"
                      >
                        {delivery.distance}
                      </Typography>
                    </Box>
                  </Box>

                  <Box
                    sx={{ 
                      display: "flex", 
                      alignItems: "flex-start", 
                      mt: 1,
                      mb: 1.5
                    }}
                  >
                    <HomeIcon
                      fontSize="small"
                      color="action"
                      sx={{ mr: 1, mt: 0.25, fontSize: isMobile ? '1rem' : '1.25rem' }}
                    />
                    <Typography
                      variant="body2"
                      sx={{
                        wordBreak: "break-word",
                        whiteSpace: "normal",
                        fontSize: isMobile ? '0.8rem' : '0.875rem',
                        lineHeight: 1.4
                      }}
                    >
                      {delivery.address}
                    </Typography>
                  </Box>

                  <Divider sx={{ my: 1.5 }} />

                  <Box sx={{ mb: 1.5 }}>
                    <Typography 
                      variant="subtitle2" 
                      fontWeight="medium"
                      sx={{ mb: 0.5, fontSize: isMobile ? '0.8rem' : '0.875rem' }}
                    >
                      Food Items:
                    </Typography>
                    <Box
                      sx={{
                        display: "flex",
                        flexDirection: "column",
                        maxHeight: "80px",
                        overflowY: "auto",
                        bgcolor: 'grey.50',
                        p: 1,
                        borderRadius: 1,
                        mx: -0.5
                      }}
                    >
                      {delivery.items.map((item, index) => (
                        <Box
                          key={index}
                          sx={{ 
                            display: "flex", 
                            mb: 0.5,
                            alignItems: 'center'
                          }}
                        >
                          <FoodIcon
                            fontSize="small"
                            sx={{
                              mr: 1,
                              color: "text.secondary",
                              fontSize: isMobile ? '0.8rem' : '0.9rem',
                            }}
                          />
                          <Typography 
                            variant="body2"
                            sx={{ fontSize: isMobile ? '0.8rem' : '0.875rem' }}
                          >
                            {item.name} ({item.quantity})
                          </Typography>
                        </Box>
                      ))}
                    </Box>
                  </Box>

                  <Box sx={{ display: "flex", alignItems: "center" }}>
                    <CalendarIcon
                      fontSize="small"
                      color="action"
                      sx={{ mr: 1, fontSize: isMobile ? '0.9rem' : '1rem' }}
                    />
                    <Typography 
                      variant="body2" 
                      color="text.secondary"
                      sx={{ fontSize: isMobile ? '0.75rem' : '0.875rem' }}
                    >
                      {formatDate(delivery.date)} • {delivery.time}
                    </Typography>
                  </Box>
                </CardContent>

                <Divider />

                <CardActions
                  sx={{
                    justifyContent: "space-between",
                    px: isMobile ? 1.5 : 2,
                    py: isMobile ? 1 : 1.5,
                  }}
                >                  {delivery.status === "Pending Confirmation" ? (
                    <Button
                      size="small"
                      variant="contained"
                      color="success"
                      onClick={() => handleConfirmDelivery(delivery.id)}
                      fullWidth
                      disabled={actionLoading[delivery.id]}
                      sx={{ 
                        py: 0.75, 
                        fontWeight: 'medium',
                        borderRadius: 1.5,
                        minHeight: 36
                      }}
                    >
                      {actionLoading[delivery.id] ? (
                        <CircularProgress size={20} color="inherit" />
                      ) : (
                        "Confirm Delivery"
                      )}
                    </Button>
                  ) : (
                    <Box sx={{ display: 'flex', width: '100%', gap: 1 }}>
                      <Button
                        size="small"
                        variant="outlined"
                        onClick={() => handleViewDetails(delivery.id)}
                        fullWidth
                        sx={{ 
                          py: 0.75, 
                          fontWeight: 'medium',
                          borderRadius: 1.5
                        }}
                      >
                        View Details
                      </Button>
                      
                      {canGenerateRouteMap(delivery.status) && (
                        <Button
                          size="small"
                          variant="contained"
                          color="primary"
                          fullWidth
                          startIcon={<MapIcon />}
                          onClick={() => navigate(`/route-map/${delivery.id}`)}
                          sx={{ 
                            py: 0.75, 
                            fontWeight: 'medium',
                            borderRadius: 1.5                          }}
                        >                          Map
                        </Button>                      )}
                    </Box>
                  )}
                </CardActions>              </Card>
            )}
            {/* Single Generate Route Map button at the bottom */}
            {hasActiveDeliveries() && (
              <Button
                variant="contained"
                color="primary"
                startIcon={<MapIcon />}
                onClick={handleGenerateRouteMap}
                fullWidth
                sx={{
                  mt: 2,
                  py: isMobile ? 1.25 : 1.5,
                  borderRadius: 2,
                  boxShadow: "0 2px 8px rgba(0,0,0,0.15)",
                  fontSize: isMobile ? '0.875rem' : '1rem',
                  fontWeight: 'medium',
                  mb: isMobile ? 2 : 0
                }}
              >
                {isMobile ? 'Optimize All Routes' : 'Generate Optimized Route Map'}
              </Button>
            )}
          </Box>
        ) : (
          <Paper sx={{ 
            p: isMobile ? 2 : 3, 
            textAlign: "center", 
            borderRadius: 2,
            mb: isMobile ? 2 : 0
          }}>
            <Typography 
              variant="body1" 
              color="text.secondary"
              sx={{ fontSize: isMobile ? '0.875rem' : '1rem' }}
            >
              No deliveries scheduled at this time.
            </Typography>
          </Paper>
        )}
      </Container>

      {/* Fixed bottom navigation for mobile - using BottomNavigation component with enhanced design */}
      {isMobile && (
        <Paper
          sx={{
            position: "fixed",
            bottom: 0,
            left: 0,
            right: 0,
            zIndex: 1000,
            boxShadow: '0 -2px 10px rgba(0,0,0,0.1)',
            borderTop: '1px solid',
            borderColor: 'divider'
          }}
          elevation={3}
        >
          <BottomNavigation
            value={navValue}
            onChange={(event, newValue) => {
              setNavValue(newValue);
            }}
            showLabels
            sx={{
              height: 56,
              '& .MuiBottomNavigationAction-root': {
                minWidth: 'auto',
                padding: '6px 0',
                '&.Mui-selected': {
                  color: 'primary.main'
                }
              },
              '& .MuiBottomNavigationAction-label': {
                fontSize: '0.675rem',
                '&.Mui-selected': {
                  fontSize: '0.675rem'
                }
              }
            }}
          >
            <BottomNavigationAction
              label="Home"
              icon={<HomeIcon sx={{ fontSize: '1.25rem' }} />}
              onClick={() => navigate("/volunteer-dashboard")}
            />
            <BottomNavigationAction
              label="Schedule"
              icon={<ScheduleIcon sx={{ fontSize: '1.25rem' }} />}
              onClick={handleViewAllSchedules}
            />
            <BottomNavigationAction
              label="Routes"
              icon={<MapIcon sx={{ fontSize: '1.25rem' }} />}
              onClick={() => navigate("/volunteer-routes")}
            />
            <BottomNavigationAction
              label="Profile"
              icon={<AccountCircleIcon sx={{ fontSize: '1.25rem' }} />}
              onClick={() => navigate(`/volunteer-profile/${volunteerData.id}`)}
            />
          </BottomNavigation>
        </Paper>
      )}
    </Box>
  );
};

export default VolunteerDashboard;
